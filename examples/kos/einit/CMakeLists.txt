# Â© 2024 AO Kaspersky Lab
# Licensed under the 3-Clause BSD License

project(einit)

# Tools for working with KasperskyOS images.
include(platform/image)
include(${KL_SDK_ROOT_PATH}/common/build-sd-image.cmake)

# Set the linker and compiler flags.
project_header_default("STANDARD_GNU_11:YES" "STRICT_WARNINGS:NO")

# Define an ENTITIES variable with a list of programs.
set(ENTITIES
${precompiled_vfsVfsSdCardFs}
Consumer
Producer
)

set(SECURITY_PSL_FILE "src/security.psl.in")
set(CONNECTIONS_CFG_FILE "src/init.yaml.in")
set(IMAGE_FS "${CMAKE_BINARY_DIR}/hdd")
set(LIBS_PATH "${IMAGE_FS}/lib")
set(QEMU_DISK_IMAGE sdcard0.img)
set(QEMU_DEPENDENCIES ${QEMU_DISK_IMAGE})
set(QEMU_FLAGS "-drive file=${QEMU_DISK_IMAGE},if=sd,format=raw")

if(blob_container_ENTITY_FOUND)
set_target_properties(${blob_container_ENTITY}
PROPERTIES
  DEPENDS_ON_ENTITY ${precompiled_vfsVfsSdCardFs}
  EXTRA_ENV "    VFS_FILESYSTEM_BACKEND: client:kl.VfsSdCardFs"
  )
endif()

# Add a target to create filesystem for disk image.
add_custom_target(disk_image_fs
  COMMAND ${CMAKE_COMMAND} -E copy_directory ${RESOURCES}/hdd ${IMAGE_FS}
)

# Add a target to create disk image for QEMU.
add_custom_target(${QEMU_DISK_IMAGE}
  DEPENDS disk_image_fs copylibs_qemu
  COMMAND ${KL_SDK_ROOT_PATH}/common/prepare_hdd_img.sh
          -d ${IMAGE_FS}
          -s 64
          -f fat32
          -img ${QEMU_DISK_IMAGE}
)

# Create a top-level CMake target named kos-qemu-image which
# can be used when building a solution image to be started in QEMU.
build_kos_qemu_image(kos-qemu-image
  EINIT_ENTITY EinitQemu
  CONNECTIONS_CFG ${CONNECTIONS_CFG_FILE}
  SECURITY_PSL ${SECURITY_PSL_FILE}
  QEMU_FLAGS "${QEMU_FLAGS}"
  QEMU_DEPENDENCIES ${QEMU_DEPENDENCIES}
  PACK_DEPS_COPY_ONLY ON
  PACK_DEPS_LIBS_PATH ${LIBS_PATH}
  PACK_DEPS_COPY_TARGET copylibs_qemu
  IMAGE_FILES ${ENTITIES}
)

# Create a top-level CMake target named kos-image which can be used
# when building a solution image to be started on the hardware platform.
build_kos_hw_image(kos-image
  EINIT_ENTITY EinitHw
  CONNECTIONS_CFG ${CONNECTIONS_CFG_FILE}
  SECURITY_PSL ${SECURITY_PSL_FILE}
  PACK_DEPS_COPY_ONLY ON
  PACK_DEPS_LIBS_PATH ${LIBS_PATH}
  PACK_DEPS_COPY_TARGET copylibs_hw
  IMAGE_FILES ${ENTITIES}
)

add_dependencies(kos-image copylibs_hw)

# Create a top-level CMake target named sd-image which can be used
# when building an SD card image to be started on the hardware platform.
set(BOARD RPI4_BCM2711)
build_sd_image(sd-image
  KOS_IMAGE_TARGET kos-image
  IMAGE_FS ${IMAGE_FS}
)
